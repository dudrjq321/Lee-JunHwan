[{"C:\\Users\\user\\Desktop\\REACT\\market\\src\\index.js":"1","C:\\Users\\user\\Desktop\\REACT\\market\\src\\reportWebVitals.js":"2","C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\02.2컴포넌트생성_예제.js":"3","C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\02.3.내가만든_컴포넌트.js":"4","C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\03.4문법(반복문).js":"5","C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\06.1.useState기본.js":"6","C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\06.2.예제(리스트_좋아요_버튼).js":"7","C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\06.3.예제(수정버튼).js":"8","C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\10.1.뒝근마켓_최종.js":"9","C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\10.2.뒝근_Modal(정보받아서출력).js":"10"},{"size":1718,"mtime":1675162851234,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1675061923412,"results":"13","hashOfConfig":"12"},{"size":177,"mtime":1675066276839,"results":"14","hashOfConfig":"12"},{"size":432,"mtime":1675066404923,"results":"15","hashOfConfig":"12"},{"size":551,"mtime":1675073592708,"results":"16","hashOfConfig":"12"},{"size":1571,"mtime":1675079541387,"results":"17","hashOfConfig":"12"},{"size":1258,"mtime":1675080880659,"results":"18","hashOfConfig":"12"},{"size":4138,"mtime":1675082368046,"results":"19","hashOfConfig":"12"},{"size":7492,"mtime":1675168423452,"results":"20","hashOfConfig":"21"},{"size":2222,"mtime":1675168305576,"results":"22","hashOfConfig":"21"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tfxz4z",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"1wtgs6g",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\REACT\\market\\src\\index.js",[],[],"C:\\Users\\user\\Desktop\\REACT\\market\\src\\reportWebVitals.js",[],[],"C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\02.2컴포넌트생성_예제.js",[],[],"C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\02.3.내가만든_컴포넌트.js",[],[],"C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\03.4문법(반복문).js",[],[],"C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\06.1.useState기본.js",[],[],"C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\06.2.예제(리스트_좋아요_버튼).js",[],[],"C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\06.3.예제(수정버튼).js",["54"],[],"C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\10.1.뒝근마켓_최종.js",["55","56","57","58"],[],"/*\r\n    제목 누르면 모달창 띄우고, 닫기 누르면 닫히게 하기\r\n    (이번 예제에서는 정보는 넘기지 않고 모달창만 띄웠다 뺐다 하기)\r\n\r\n    1) (외부 컴포넌트) 08.2.모달 컴포넌트 생성\r\n    2) useState 만들기 => true false 전환해가면서 창 보였다 안보였다 하기\r\n    \r\n*/ \r\nimport React, {useState} from \"react\";\r\nimport './css/뒝근.css'\r\nimport Modal from \"./10.2.뒝근_Modal(정보받아서출력)\";\r\n\r\nfunction Ex08_1() {\r\n\r\n    const [itemList, setItemList] = useState([\r\n        {\r\n            id: 3,\r\n            title: '팝니다3',\r\n            content: '내용3 이에유~',\r\n            likeCount: 0,\r\n            uploadTime: '1시간 전',\r\n            completeChk: true,\r\n        },\r\n        {\r\n            id: 2,\r\n            title: '팝니다2',\r\n            content: '내용2 이에유~',\r\n            likeCount: 0,\r\n            uploadTime: '2시간 전',\r\n            completeChk: true,\r\n        },\r\n        {\r\n            id: 1,\r\n            title: '팝니다1',\r\n            content: '내용1 이에유~',\r\n            likeCount: 0,\r\n            uploadTime: '3일 전',\r\n            completeChk: true,\r\n        },\r\n    ]);\r\n\r\n\r\n    function getFromChild(index, titleInput, contentInput) {\r\n        console.log(index + \" , \" +titleInput + \" , \" +contentInput);\r\n\r\n        let tmp_itemList = [...itemList];\r\n\r\n        // 수정일때\r\n        if(index >= 0) {\r\n            tmp_itemList[index].title = titleInput;\r\n            tmp_itemList[index].content = contentInput;\r\n        }\r\n        \r\n        // 등록일때\r\n        else if(index == -1) {\r\n            let newInfo = {\r\n                id: itemList.length + 1,\r\n                title: titleInput,\r\n                content: contentInput,\r\n                likeCount: 0,\r\n                uploadTime: '방금',\r\n                completeChk: true,\r\n            }\r\n\r\n            tmp_itemList.unshift(newInfo)\r\n        }\r\n\r\n        setItemList(tmp_itemList);\r\n    }\r\n \r\n\r\n    // 좋아요 카운트 업\r\n    function like_count_up(index) { \r\n         let tmp_itemList = [...itemList];\r\n         tmp_itemList[index].likeCount = tmp_itemList[index].likeCount+1;\r\n         setItemList(tmp_itemList)\r\n    }\r\n \r\n     \r\n    \r\n    // 판매완료 넣기\r\n    // let [completeChk, setCompleteChk] = useState([true, true, true]); \r\n    function title_chg(index) {\r\n        let tmp_itemList = [...itemList]; \r\n\r\n        if(tmp_itemList[index].completeChk === true) {\r\n            // (판매완료) 문구 넣는 부분\r\n            tmp_itemList[index].title = tmp_itemList[index].title + \" (판매완료)\";\r\n\r\n            // true 를 false 로 변경\r\n            tmp_itemList[index].completeChk = false;\r\n        } \r\n        else {\r\n            // (판매완료) 문구 빼는 부분\r\n            tmp_itemList[index].title = tmp_itemList[index].title.replace(\" (판매완료)\",\"\");\r\n\r\n            // false 를 true 로 변경\r\n            tmp_itemList[index].completeChk = true;\r\n        }\r\n        setItemList(tmp_itemList);\r\n    }\r\n\r\n    let [addList, setAddList] = useState('');\r\n    function add_list() { \r\n    //     // 방법2: Deep Copy 방식으로 복사하기\r\n    //     if(addList.length > 0) {\r\n    //         let tmp_title = [...title];\r\n    //         tmp_title.unshift(addList);\r\n    //         setTitle(tmp_title);\r\n    //         ////////////////////////////////////\r\n    //         // 리스트를 추가하면 '좋아요', '업로드 시간' 들을 다 추가해줘야한다. 안그러면 기존에 3개인채로 리스트레 그려지기 때뭄ㄴ에 4번째 항목 부터는 좋아요나 업로드 시간이 찍히지 않는다.\r\n\r\n    //         // 좋아요 개수 바꾸기\r\n    //         let tmp_likeCount = [...likeCount];\r\n    //         tmp_likeCount.unshift(0);\r\n    //         setLikeCount(tmp_likeCount);\r\n\r\n    //         // 업로드 시간 바꾸기\r\n    //         let tmp_uploadTime = [...uploadTime];\r\n    //         tmp_uploadTime.unshift('방금');\r\n    //         setUploadTime(tmp_uploadTime);\r\n    //         // uploadTime\r\n\r\n    //         // 수정 누르면 바뀔 제목 리스트 바꾸기\r\n    //         // newTitle\r\n    //         let tmp_newTitle = [...newTitle];\r\n    //         tmp_newTitle.unshift(\"초밥 쿠폰\");\r\n    //         setNewTitle(tmp_newTitle);\r\n    //     }\r\n    }\r\n\r\n    // 삭제\r\n    let del_list = (itemId) => {\r\n\r\n        // filter => 기존 배열에서 조건에 일치하는 새 배열을 생성(반복문처럼 배열의 요소를 순회하면서 동작)\r\n\r\n        setItemList(itemList.filter(  \r\n            (item)=> item.id !== itemId)\r\n        )\r\n\r\n    }\r\n\r\n\r\n    // **** 모달 관련 ***\r\n    // 모달창 띄우기\r\n    let [showModal, setShowModal] = useState(false);\r\n    \r\n    // 몇번째 제목 눌렀는지 index 번호 갱신\r\n    let [selectedListIdx, setSelectedListIdx] = useState(-1);\r\n\r\n    // '열기', '쓰기', 수정' 중에 뭐 넘길건지 저장\r\n    let [modalType, setModalType] = useState('');\r\n\r\n    let openModal = (tmp, index, type) => {\r\n        setShowModal(tmp);\r\n        setSelectedListIdx(index);\r\n        setModalType(type)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"wrap\">\r\n            <div className=\"header\">\r\n                <div className=\"logo\">뒝근마켓</div>\r\n\r\n                <div className=\"hamberger\">\r\n                    <div className=\"line\"></div>\r\n                    <div className=\"line\"></div>\r\n                    <div className=\"line\"></div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"main\">\r\n\r\n            { // title 배열 (['팝니다3','팝니다2','팝니다1']) 을 map 으로 돌려가면서 리스트 생성\r\n                itemList.map((v, i) => {\r\n                    return (\r\n                        <div className=\"list\" key={i}>\r\n                            <h3 onClick={()=>{ openModal(true, i, \"open\") }}>{itemList[i].title}</h3>\r\n                            <div className=\"like_count\">\r\n                                { itemList[i].likeCount }\r\n                                <span className=\"btn_like\" onClick={()=>{ like_count_up(i)}}>🤍</span>\r\n                            </div>\r\n                            <div className=\"upload_time\">{itemList[i].uploadTime}</div>\r\n\r\n                            <button className=\"list_btn btn_chg_title\" onClick={()=> {openModal(true, i, \"edit\")}}>수정</button>\r\n                                \r\n                            <button className=\"list_btn btn_complete\" onClick={()=> {title_chg(i)}}>\r\n                            {\r\n                                itemList[i].completeChk === true ? \"완료\":\"취소\"\r\n                            }\r\n                            </button> \r\n\r\n                            <button className=\"list_btn btn_complete\" onClick={()=>{del_list(itemList[i].id)}}>삭줴</button>\r\n                        </div>\r\n                    )\r\n                })\r\n\r\n            } \r\n            </div>\r\n\r\n            <div className=\"add_task\"> \r\n                <button className=\"btn_newList\" onClick={()=> {openModal(true, -1, \"new\")}}>내 물건 팔기</button>\r\n            </div>\r\n\r\n            {/* { showModal === true ? <Modal /> : null } */}\r\n            { showModal && <Modal openModal={openModal} selectedListIdx={selectedListIdx} itemList={itemList[selectedListIdx]} modalType={modalType} getFromChild={getFromChild} /> }\r\n        </div>\r\n    );\r\n}\r\nexport default Ex08_1;\r\n","C:\\Users\\user\\Desktop\\REACT\\market\\src\\수업\\10.2.뒝근_Modal(정보받아서출력).js",[],[],{"ruleId":"59","severity":1,"message":"60","line":13,"column":20,"nodeType":"61","messageId":"62","endLine":13,"endColumn":31},{"ruleId":"63","severity":1,"message":"64","line":55,"column":23,"nodeType":"65","messageId":"66","endLine":55,"endColumn":25},{"ruleId":"59","severity":1,"message":"67","line":103,"column":10,"nodeType":"61","messageId":"62","endLine":103,"endColumn":17},{"ruleId":"59","severity":1,"message":"68","line":103,"column":19,"nodeType":"61","messageId":"62","endLine":103,"endColumn":29},{"ruleId":"59","severity":1,"message":"69","line":104,"column":14,"nodeType":"61","messageId":"62","endLine":104,"endColumn":22},"no-unused-vars","'setNewTitle' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'addList' is assigned a value but never used.","'setAddList' is assigned a value but never used.","'add_list' is defined but never used."]