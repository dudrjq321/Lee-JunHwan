{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\REACT\\\\market\\\\src\\\\\\uC218\\uC5C5\\\\06.1.useState\\uAE30\\uBCF8.js\",\n  _s = $RefreshSig$();\n/*\r\n    useState 는 데이터를 저장하고, 변수값을 변경하는데 사용됨\r\n    뭔가 데이터(화면)가 바뀌는 부분 관련 된건 다 useState 사용한거임\r\n\r\n    *그냥 변수 대신 useState 쓰는 이유\r\n        변수를 쓰면 값이 변경될때 새로고침을 해야 하지만, useState 를 쓰면 알아서 재렌더링 된다.\r\n\r\n\r\n    - 한마디로 값을 저장해서 사용하고 싶으면\r\n        1) 변수에 넣거나\r\n        2) State에 넣거나.\r\n\r\n    useState 를 쓰려면 라이브러리 import 해와야함\r\n\r\n    - 사용법\r\n        1) 변수선언: 아래 코드처럼 state 생성하면서 초기값 넣고\r\n                \r\n            const [변수명, 변수재선언 함수] = useState(초기값)\r\n            const [state, setState] = useState(0)\r\n\r\n        2) 변수재선언: setState(변경값) 를 이용해서 state 의 값을 변경할 수 있다.\r\n                      (setter 같은거임)\r\n \r\n\r\n*/\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Ex06_1() {\n  _s();\n  const [state, setState] = useState(true);\n\n  // setState 는 아래랑 같은거임\n  // function setState(tmp) {\n  //     state = tmp;\n  // }\n\n  const onClick = () => {\n    console.log(\"눌림\");\n    setState(!state);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"state \\uAC12: \", state.toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: \"\\uD655\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Ex06_1, \"VvKXSPDp4yRj5VI1Ef/r5LoZ51I=\");\n_c = Ex06_1;\nexport default Ex06_1;\nvar _c;\n$RefreshReg$(_c, \"Ex06_1\");","map":{"version":3,"names":["React","useState","Ex06_1","state","setState","onClick","console","log","toString"],"sources":["C:/Users/user/Desktop/REACT/market/src/수업/06.1.useState기본.js"],"sourcesContent":["/*\r\n    useState 는 데이터를 저장하고, 변수값을 변경하는데 사용됨\r\n    뭔가 데이터(화면)가 바뀌는 부분 관련 된건 다 useState 사용한거임\r\n\r\n    *그냥 변수 대신 useState 쓰는 이유\r\n        변수를 쓰면 값이 변경될때 새로고침을 해야 하지만, useState 를 쓰면 알아서 재렌더링 된다.\r\n\r\n\r\n    - 한마디로 값을 저장해서 사용하고 싶으면\r\n        1) 변수에 넣거나\r\n        2) State에 넣거나.\r\n\r\n    useState 를 쓰려면 라이브러리 import 해와야함\r\n\r\n    - 사용법\r\n        1) 변수선언: 아래 코드처럼 state 생성하면서 초기값 넣고\r\n                \r\n            const [변수명, 변수재선언 함수] = useState(초기값)\r\n            const [state, setState] = useState(0)\r\n\r\n        2) 변수재선언: setState(변경값) 를 이용해서 state 의 값을 변경할 수 있다.\r\n                      (setter 같은거임)\r\n \r\n\r\n*/\r\nimport React, { useState }  from \"react\";\r\n\r\nfunction Ex06_1() {\r\n\r\n    const [state, setState] = useState(true)\r\n\r\n    // setState 는 아래랑 같은거임\r\n    // function setState(tmp) {\r\n    //     state = tmp;\r\n    // }\r\n\r\n    \r\n    const onClick = () => {\r\n        console.log(\"눌림\")\r\n\r\n        setState(!state)\r\n    }\r\n\r\n    return (\r\n    <>\r\n        {/* boolean 값은 직접 화면에 출력 안됨  toString() 붙여줘야한다. */}\r\n        <div>state 값: { state.toString() }</div>\r\n        <button onClick={ onClick }>확인</button>\r\n    </>\r\n    );\r\n}\r\nexport default Ex06_1;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAS,OAAO;AAAC;AAAA;AAEzC,SAASC,MAAM,GAAG;EAAA;EAEd,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGH,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA;EACA;EACA;;EAGA,MAAMI,OAAO,GAAG,MAAM;IAClBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;IAEjBH,QAAQ,CAAC,CAACD,KAAK,CAAC;EACpB,CAAC;EAED,oBACA;IAAA,wBAEI;MAAA,WAAK,gBAAS,EAAEA,KAAK,CAACK,QAAQ,EAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAAQ,eACxC;MAAQ,OAAO,EAAGH,OAAS;MAAA,UAAC;IAAE;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA,gBACxC;AAEP;AAAC,GAvBQH,MAAM;AAAA,KAANA,MAAM;AAwBf,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}